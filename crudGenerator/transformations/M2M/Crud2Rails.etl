pre{
}
post{
 	//falta adicionar código para agregar los atributos fk generados
 	//por las associaciones
}
rule App2App
	transform s : crud!Application
	to t : rails!Application {
	("App2App"+s.name).println();
	t.name = s.name; 
	t.entities = s.entities.equivalent();
}
@lazy
rule Entity2Entity
	transform s : crud!Entity
	to t : rails!Entity {
	("  Entity2Entity: "+s.name).println();
	t.name = s.name.toLowerCase().firstToUpperCase().replace(' ',''); 
	t.attributes = s.atributes.equivalent();
	t.service = new rails!Service();
	if(not (s.crud == null)){
		t.service.allowCreate = s.crud.allowCreate;
		t.service.allowRead = s.crud.allowRead;
		t.service.allowUpdate = s.crud.allowUpdate;
		t.service.allowDelete = s.crud.allowDelete;
		t.service.name = s.name.toLowerCase().replace(' ','_');
		t.service.fields = s.crud.fields.select(f|f.isKindOf(crud!PrimitiveField)).equivalent();
		for(associationField in s.crud.fields.select(f|f.isKindOf(crud!AssociationField))){
			("    associationField "+associationField.association.source.name+" / "+associationField.association.target.name).println();
			//TODO: Association fields no se está mapeando bien
			//Puede haber error en los datos de entrada (AssociationField)
			var field = new rails!Field();
			if(s.atributes.includes(associationField.association.source)){
				//entity is src
				if(associationField.association.manyTarget){
					("      1").println();
					field.dataType=rails!DataType#array;
					field.name = associationField.association.target.name.toLowerCase().replace(' ','_')+'_ids';
				}
				else{
					("      2").println();
					field.dataType=convertDataType(associationField.association.source.dataType)+'_id';
				}
			}else{
				//entity is target
				if(associationField.association.manySource){
					("      3").println();
					field.dataType=rails!DataType#array;
					field.name = associationField.association.source.name.toLowerCase().replace(' ','_')+'_ids';
				}
				else{
					("      4").println();
					field.dataType=convertDataType(associationField.association.target.dataType);
					field.name = associationField.association.source.name.toLowerCase().replace(' ','_')+'_id';
				}
			}
			t.service.fields.add(field);
		}
	}
}

@lazy
rule PrimitiveField2Field
	transform s : crud!PrimitiveField
	to t : rails!Field {
	("    PrimitiveField2Field: "+s.attribute.name).println();
	t.name = s.attribute.name.toLowerCase().replace(' ','_');
	t.dataType=convertDataType(s.attribute.dataType);
}

@lazy
rule Attr2Attr
	transform s : crud!Atribute
	to t : rails!Attribute {
	("    Attr2Attr: "+s.name).println();
	t.name = s.name.toLowerCase().replace(' ','_'); 
	t.validations = s.validations.equivalent();
	t.dataType=convertDataType(s.dataType);
}

@lazy
rule Validation2Validation
	transform s : crud!Validation
	to t : rails!Validation {
	("      Validation2Validation: "+s.validationType.name).println();
	switch(s.validationType){
		case crud!ValidationType#required: t.validationType=rails!ValidationType#required;
		case crud!ValidationType#uniqueness: t.validationType=rails!ValidationType#uniqueness;
	}
}


operation convertDataType(dataType){
	switch(dataType){
		case crud!DataType#int: return rails!DataType#int;
		case crud!DataType#string:  return rails!DataType#string;
		case crud!DataType#text:  return  rails!DataType#text;
		case crud!DataType#decimal: return  rails!DataType#decimal;
		case crud!DataType#dateTime: return rails!DataType#dateTime;
	}
}